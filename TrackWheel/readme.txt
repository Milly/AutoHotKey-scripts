TrackWheel

使い方等の詳細は以下のページで。
http://sites.google.com/site/agkh6mze/trackwheel

■ 動作環境
- AutoHotkey v1.0.48.xx以降 (AutoHotkey_L, 駄目文字微対策版でも可)

■ 導入と起動・終了
- トラックポイント等を利用して独自のスクロール機能を利用しているなら停止する
- フォルダ構成を維持してZIP書庫を任意の場所に展開する。
- TW.ahk関連付けで起動もしくは、AutoHotkey.exeにドラッグ＆ドロップ
- 終了はトレイアイコンを右クリックしてExitを選択する。

■ 設定の変更方法
設定は TW.ahk と同一フォルダにある TW.ini を編集して行う。
同梱のIniファイル内に詳細なコメントがあるのでそちらを参照すること。

■ スクロール方式決定方法
以下の順で処理を行う
1) Iniに記載されたルールに合致     → 記載されたルール
2) ListViewのスクロール命令に反応  → LView
3) スクロールバーへの命令に反応    → Scroll または Scroll2
4) 上記のどれにも合致しない        → Wheel

■ 組み込み方法

●インクルードと初期化
#Includeコマンドでインクルードする。Autoexecブロック内には書かないように。
(関数ライブラリスクリプトとして利用する場合はこの宣言は必要ない。)
Autoexec内で 初期化関数 TW_Initialize() を呼び出す。
例)
TW_Initialize()

●設定ファイルを明示的に指定したい場合
設定ファイルを明示的に指定したい場合は引数で指定する。
(初期化時は A_LineFile を基準としたフォルダをカレントフォルダにしている)
例)
TW_Initialize("hoge.ini")

※ 終了時処理は特に何もしなくて良い

●機能呼び出し関数: TW_Start(isToggle=false)

組み込み用関数はこれだけ。
引数 isToggle はトグル動作をするかどうか(真偽値を指定)
A_ThisHotkeyからキー名を自動判定で取り出しているので
ホットキーサブルーチンのみ利用可。

例1) X1ボタンでの組み込み
XButton1::TW_Start()

例2) アプリケーションキーでトグル動作
AppsKey::TW_Start(true)

例3) 連続キー押下回数判定関数 KeyCount と組み合わせて
    Ctrl3回タップで起動させてみる
~Ctrl::KeyCount() > 2 ? TW_Start(true) : 

例4) 以前のバージョンと異なり以下のようなコードは有効
*MButton::
  TW_Start()
  if (A_TimeSinceThisHotkey < 300)
    タイムアウトしなかった時の処理
  else
    タイムアウトしたときの処理
  return

例5) コンビネーションキー(無変換 & Space)でトグル
~vk1Dsc07B & Space::TW_Start(true)


●スクロールルールとダイナミック関数コール
各種スクロールルールは以下のようにDynamic Function Call を用いて呼び出している。

	TW__%ruleX%_X(lineX, keys)
	TW__%ruleY%_Y(lineY, keys)

なので "TW__NNN_X(param1, param2)という関数を作って、Iniにその旨定義してしまえば
TrackWheel側から簡単に呼び出しができ、マウス移動を様々に加工できる。

同梱のおまけスクリプトを参考にされたし。

●ユーザ定義サブルーチン "UserAction" について
グローバル変数"UserAction"に値が設定されていて、かつ、その変数で示すラベルがある時
TrackWheelはそのサブルーチンをコールする。
呼び出すタイミングは、ウィンドウ情報の取得と各種ルールの適応が完了した後である。
(＝デバッグ表示で得られる情報を得た直後）

グローバル変数 "TW_UserFlg" を真(True)にしてから呼び出し、
サブルーチンから復帰後にその変数を評価して偽に変化していた場合、
TrackWheelは動作を終了する。

用途としてはTrackWheel側で取得した情報を元に中断をする判定が行うものだが、
使い方によっては確定したルールを強引に変更したりできる。
これも同梱のおまけスクリプトに記載があるので参考にされたし。


■ 更新履歴

[V.7]
- Unicode版のAutoHotkeyでも動作するようにした(スクリプトはSJISのまま)。
- アクション開始座標が負数の時(要はマルチモニタ)の対応をしたつもり。
- AutoHotkeyなしで動作するコンパイル済みバイナリを同梱(AutoHotkeyLSC.binを利用)

[V.6]
- 以前あったスクロール加速オプションを復活させた。
- TrackWheel動作中にAutohotkeyのホットキーが効かないバグを修正
　(不定期に暴走してボタンが効かなくなる件も対処出来たはず)
- マウスボタン以外でもIniファイルでアサイン出来るようにした
- 非クライアント領域(閉じるボタンなど)に擬似クラスを割り当て設定で利用出来るようにした。
- リストビュー専用のスクロール方式を追加。自動判定で適応させるようにした。
- 少しでもスクロールした場合にボタン押下イベントを抑止させるオプションを追加
- 縦横何れかのみをスクロール許可するオプションを追加
　これに伴い[config]セクションの Button は廃止し Hotkey に変更
- 組み込み用の関数を大幅に単純化した。これに伴いTW_PostActionを廃止。
- 全く使わないトレイメニュー関連機能を削除した
- その他ユーティリティ機能をいくつか追加。

[V.5]vk1Dsc07B & Space
- Altキー押下時にスクロール後にSleepする設定を加えた
- サムドラッグエミュレート抑止オプションを追加
- スクロール方法の自動判別で Scroll2 を優先するオプションを追加
- デバッグコードが残っていたのを削除

[V.4]
- 設定しても何もなかったオプション項目に意味を持たせた
- 【重大】スクロール量の算出方式で閾値を超えた時に1行動くようにした

[V.3]
- 一部のアプリケーションが100%の再現性で落ちてしまう不具合に対処
- Iniファイルのオプション "NoHide" が効いていないバグを修正
